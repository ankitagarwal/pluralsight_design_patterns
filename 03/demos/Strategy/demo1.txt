For this demo, I'll be using the integrated development environment that
ships with most Python distributions: IDLE.  If you are running a system that has
Python installed, chances are you also have IDLE!

The program you see is one I've put together in an initial attempt to solve the
problem of computing shipping costs.  After the imports, there are three sections:
one for each shipping method.  In each section, I

1. instantiate an order object, specifying a shipping method
2. instantiate a shipping cost object, which will do the number crunching
3. compute the cost
4. check that the computed cost meets my expectations

Let's run this program to see if it works.  If all three assert statements pass,
the program will print a "tests passed" message to confirm.  So, here we go.

First, let's start up a Python shell from the Run menu. There it is! 
Now, let's run the program.  Whew! The tests all passed, as desired.

Let's take a look at the objects being used.

The Order class is simple and holds a single property, the shipper 
for the order.  Looking at this, though, it appears that this might`
violate the "S" in SOLID.  An Order should be about who is ordering what.
Adding the shipper to be used seems to go against the single responsibility
principle.  

Next,here is the Shipper class.  It really is just an enumeration.
Note, starting with Python 3.4, there is an Enum class that can be used. 
Here we just assign integers to each shipper name.

Finally, this is the ShippingCost class.  It uses the default constructor,
then defines a shipping_cost method to do the work.  The method computes the
cost according to the shipper stored in the order. If the shipper is not one
of those the method is programmed to handle, it raises an exception.

For each shipper, this method calls a private helper method to get the
actual cost.

Now, what if a new shipper is to be added?  We'd have to modify this class,
adding a new elif condition and a new helper method.  If you haven't guessed 
it already, this violates the open/closed principle -- the "O" in SOLID. In
fact, whenever you see a long sequence of if/elif/else, take a closer look.
There may be a better way!

Back in the main program, there is another, more subtle violation.  
When I instantiate a new cost-calulator, I am programming to an implementation
-- that of the ShippingCost object -- not an abstraction.  This violates the "D" 
in SOLID.

